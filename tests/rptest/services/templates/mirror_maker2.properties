name=mirror-maker-connector
topics=.*
tasks.max=1

clusters=source,target


source.bootstrap.servers={{source_brokers}}
target.bootstrap.servers={{target_brokers}}

source.offset.storage.replication.factor=3
target.offset.storage.replication.factor=3

source.config.storage.replication.factor=3
target.config.storage.replication.factor=3

source.status.storage.replication.factor=3
target.status.storage.replication.factor=3
emit.checkpoints.interval.seconds = 10

# use identity replication policy to us the same topic names
replication.policy.class=org.apache.kafka.connect.mirror.IdentityReplicationPolicy

# Mirror maker configurations.
offset-syncs.topic.replication.factor=3
heartbeats.topic.replication.factor=3
checkpoints.topic.replication.factor=3

source->target.enabled=true
source->target.topics=.*

{% if cg_pattern %}
source->target.sync.group.offsets.enabled = true
source->target.sync.group.offsets.interval.seconds = 10
source->target.refresh.groups.interval.seconds=1
source->target.sync.groups=.*

{% endif %}
# use ByteArrayConverter to ensure that records are not re-encoded
key.converter=org.apache.kafka.connect.converters.ByteArrayConverter
value.converter=org.apache.kafka.connect.converters.ByteArrayConverter

# Setting replication factor of newly created remote topics
replication.factor=3
