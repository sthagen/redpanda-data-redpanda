#!/usr/bin/env python3
# Copyright 2020 Redpanda Data, Inc.
#
# Use of this software is governed by the Business Source License
# included in the file licenses/BSL.md
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0

import os
import sys
import pathlib
import subprocess
import re

# Generated code (like our RPCs) can be apart of a module's exports
# but since there is no file on the filesystem, we need to teach 
# this script that the file is there.
GENERATED_CODE = {
    pathlib.Path("transform/rpc/rpc_service.h"),
    pathlib.Path("rpc/test/cycling_service.h"),
    pathlib.Path("rpc/test/echo_service.h"),
    pathlib.Path("rpc/test/echo_v2_service.h"),
}

# Violations to ignore. Why? Because we are replacing CMake with Bazel and we
# need to move some files around to make Bazel happy. Eventually Bazel will
# enforce the rules we need and we can remove this. Until then, we'll add
# exceptions as needed so we can still get the benefits of this linter.
IGNORE = {
    pathlib.Path("http/tests/http_imposter.h"),
    pathlib.Path("http/tests/registered_urls.h"),
}

def get_modules(root):
    """
    Get new-style modules (ie those that use the new layout where public headers
    are separated from private headers).
    """
    for dirpath, _, _ in os.walk(root):
        dir = pathlib.Path(dirpath)
        if dir.name == "include":
            yield dir.parent.relative_to(root)


def validate_module(root, module):
    """
    Validate new-style module.

    1. The path `include/` should contain exactly `<module>` subdir
    2. There should be no ambiguous files in export/internal scope

    Returns set of exported files.
    """
    module_root = root / module
    include_root = module_root / "include"
    include_path = include_root / module

    print(f"Validating module {module}")
    print(f"Module root {module_root}")
    print(f"Include root {include_root}")
    print(f"Include path {include_path}")

    assert len(
        [x for x in include_root.iterdir()]
    ) == 1, f"Include root expected to contain exactly one entry {include_root}"
    assert include_path.is_dir(
    ), f"Expected the directory {include_path} to exist"

    exports = set(p for p in include_path.rglob("*") if p.is_file())
    internal = set(p for p in module_root.rglob("*") if p.is_file()) - exports

    # check for ambiguous paths. these are files that have the same path
    # in export/internal sets relative to include/root dirs, respectively.
    ambiguous = set(p.relative_to(include_root) for p in exports).intersection(
        set(p.relative_to(root) for p in internal))
    assert not ambiguous, f"Found ambiguous paths in module {module}: {ambiguous}"

    def sample(c):
        ret = [str(p) for p in list(c)[:3]]
        ret.append("...")
        return ret

    print(f"Found {len(exports)} exports: sample {sample(exports)}")
    print(f"Found {len(internal)} internal sample {sample(internal)}")

    # strip off the include_root so that it is later comparable to the format
    # that we'll see in an #include "<module>/file" format.
    return set(p.relative_to(include_root) for p in exports)


def validate_modules(root):
    """
    Validate all new-style modules and return a collection of all files that are
    in public include paths and all module names.
    """
    exports = set()
    modules = set(get_modules(root))
    for module in modules:
        print(f"Found module {module}: {root / module}")
        new_exports = validate_module(root, module)
        assert exports.isdisjoint(new_exports)
        exports.update(new_exports)
    return exports, modules


def get_include_path(line):
    m = re.match(r".*#include.*\<(.+)\>.*", line)
    if m:
        return pathlib.Path(m.group(1))
    m = re.match(r".*#include.*\"(.+)\".*", line)
    if m:
        return pathlib.Path(m.group(1))


def get_includes(root):
    output = subprocess.check_output(f"git grep #include {root}".split())
    for line in output.decode().split("\n"):
        include_path = get_include_path(line)
        if include_path is not None:
            yield line, include_path


def get_module_includes(root, modules):
    includes = set()
    for line, include_path in get_includes(root):

        # guess the module of the include. includes like <random> or "foo.h" are
        # ignored explicitly by checking the length of their path. this is
        # needed because we also have modules in redpanda named "random".
        # finally, we choose the longest module path to which the include path
        # is relative.
        if len(include_path.parents) == 1:
            continue

        # Skip over generated code, we can't check the existance of these files
        # This effectively treats generated code as exported.
        if include_path in GENERATED_CODE:
            continue

        include_module = None
        for module in modules:
            if include_path.is_relative_to(module):
                if include_module is None:
                    include_module = module
                elif len(module.parents) > len(include_module.parents):
                    include_module = module

        # if the include is not from a new-style module then we aren't going to
        # apply any rules.
        if include_module is None:
            continue

        # we want to allow tests within a module to include any other file
        # within that module. for example these should be allowed:
        #
        #   [user@fedora debug]$ git grep container/tests/bench_utils.h ../..
        #   ../../src/v/container/tests/map_bench.cc:#include "container/tests/bench_utils.h"
        #   ../../src/v/container/tests/vector_bench.cc:#include "container/tests/bench_utils.h"
        source, *_ = line.split(":")
        source = pathlib.Path(source)
        source_test_module = None
        for path in source.parents:
            if path.name == "tests" and path.is_dir():
                source_test_module = path.parent.relative_to(root)

        # if the source file is a test then we ignore files include from the
        # same module as the test.
        if source_test_module == include_module:
            continue

        includes.add(include_path)

    return includes


def run(root):
    exports, modules = validate_modules(root)
    module_includes = get_module_includes(root, modules)
    for path in exports:
        print(f"Found exported file from module {path}")
    for path in module_includes:
        print(f"Found include from module {path}")

    print(
        f"Checking {len(module_includes)} includes from {len(modules)} modules against {len(exports)} exported files"
    )
    violations = module_includes - exports - IGNORE
    assert not violations, f"Non-exported include found: {violations}"


if __name__ == "__main__":
    assert len(sys.argv) == 2
    root = pathlib.Path(sys.argv[1])
    assert root.is_dir()
    run(root)
